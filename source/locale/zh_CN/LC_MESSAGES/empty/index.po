# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Teclib'
# This file is distributed under the same license as the GLPI plugins package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# liAnGjiA <liangjia@qq.com>, 2018
# 李赋 <fu792659@163.com>, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GLPI plugins 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-24 14:02+0100\n"
"PO-Revision-Date: 2016-10-25 19:22+0000\n"
"Last-Translator: 李赋 <fu792659@163.com>, 2018\n"
"Language-Team: Chinese (China) (https://www.transifex.com/teclib/teams/28042/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/empty/index.rst:2
msgid "Empty"
msgstr "空"

#: ../../source/empty/index.rst:4
msgid "Sources link: https://github.com/pluginsGLPI/empty"
msgstr "源代码链接: https://github.com/pluginsGLPI/empty"

#: ../../source/empty/index.rst:5
msgid "Download: *not relevant*"
msgstr "下载：*不相关*"

#: ../../source/empty/index.rst:7
msgid "This plugins does... nothing. Really!"
msgstr "这个插件什么...也没做。真的！"

#: ../../source/empty/index.rst:9
msgid ""
"This is designed to be a start point for writing plugins, with very minimal "
"defaults usefull scripts, and some advices. If you're looking for plugins "
"possibilities, take a look at :doc:`the example plugin <../example/index>`."
msgstr ""
"这是设计用于编写插件的起点，具有非常有用的脚本默认值和一些建议。如果您正在寻找插件的可能性，请查看:doc:`示例插件<../example/index>`。"

#: ../../source/empty/index.rst:12
msgid "Create a new plugin"
msgstr "新建插件"

#: ../../source/empty/index.rst:14
msgid ""
"An utility script to create a new plugin - ``plugin.sh`` is provided. You "
"will call it with a plugin name, a version, an optionally the path where "
"your want it to be created:"
msgstr "提供了一个用于创建新插件的实用程序脚本 - “plugin.sh”。您将使用插件名称，版本，可选择的路径来调用它："

#: ../../source/empty/index.rst:20
msgid ""
"The script will sanityze and lowercase the name you provided, copy the "
"templates files into the new directory, and then make some replacements."
msgstr "该脚本将对您提供的名称进行审查和小写，将模板文件复制到新目录中，然后进行一些替换。"

#: ../../source/empty/index.rst:22
msgid ""
"Using the script without destination parameter, it will create you directory"
" plugin, ``mygreatplugin`` just beside its own directory. Otherwise, it "
"would create the new directory in the specified path:"
msgstr "使用没有目标参数的脚本，它将创建你的目录插件，``mygreatplugin``就在它自己的目录旁边。否则，它将在指定的路径中创建新目录："

#: ../../source/empty/index.rst:29
msgid "Update existing plugin"
msgstr "更新现有插件"

#: ../../source/empty/index.rst:31
msgid ""
"There is no automated way to update an existing plugin, because there would "
"be too many cases to handle. But don't worry, procedure is quite simple ;)"
msgstr "没有自动更新现有插件的方法，因为要处理的案例太多。但不要担心，程序很简单;）"

#: ../../source/empty/index.rst:33
msgid "Using empty features is as simple as creating a few files:"
msgstr "使用空功能就像创建一些文件一样简单："

#: ../../source/empty/index.rst:35
msgid "``composer.json``,"
msgstr "``composer.json``,"

#: ../../source/empty/index.rst:36
msgid "``.travis.yml``,"
msgstr "``.travis.yml``,"

#: ../../source/empty/index.rst:37
msgid "``Robofile.php``,"
msgstr "``Robofile.php``,"

#: ../../source/empty/index.rst:38
msgid "``.gitignore``."
msgstr "``.gitignore``."

#: ../../source/empty/index.rst:40
msgid ""
"If you do not have yet any composer or travis configuration file, you can "
"just copy the ones from empty plugin. Otherwise; in you ``composer.json``, "
"just add:"
msgstr "如果您还没有任何composer或travis配置文件，则可以从空插件中复制那些文件。在你``composer.json``中，只需添加："

#: ../../source/empty/index.rst:49
msgid "And then run ``composer require glpi-project/tools``."
msgstr "然后运行``composer require glpi-project/tools``。"

#: ../../source/empty/index.rst:51
msgid "In the travis configuration file, just add the CS call:"
msgstr "在travis配置文件中，只需添加CS调用："

#: ../../source/empty/index.rst:58
msgid "In the ``.gitignore`` file, add the following:"
msgstr "在``.gitignore``文件中，添加以下内容："

#: ../../source/empty/index.rst:68
msgid ""
"As for the Robo.li configuration file, note that the one embed in the empty "
"plugin is a bit specific, you'll have to edit it in order to get things "
"working. See below for more informations."
msgstr "至于Robo.li配置文件，请注意嵌入空插件的那个有点特别，你必须编辑它才能使它正常工作。有关更多信息，请参见下文。"

#: ../../source/empty/index.rst:70
msgid ""
"Finally, as the ``tools`` project will provide you some features, you can "
"remove duplicated tools scripts (files such as ``release``, "
"``extract_template.sh``, ...) that would be present in your plugin."
msgstr ""
"最后，由于``tools``项目将为您提供一些功能，您可以删除重复的工具脚本（例如``release``，``extract_template.sh``，...等文件）。"

#: ../../source/empty/index.rst:73
msgid "Features"
msgstr "特征"

#: ../../source/empty/index.rst:76
msgid "Coding standards"
msgstr "编码标准"

#: ../../source/empty/index.rst:78
msgid ""
"The GLPI `PHPCodeSniffer <http://pear.php.net/package/PHP_CodeSniffer>`_ "
"rulesets are provided as ``vendor/glpi-project/coding-"
"standard/GlpiStandard/``."
msgstr ""
"GLPI `PHPCodeSniffer <http://pear.php.net/package/PHP_CodeSniffer>`_ "
"rulesets以``vendor/glpi-project/coding-standard/GlpiStandard/``的形式提供。"

#: ../../source/empty/index.rst:80
msgid "To check coding standards, just use the Robo.li task ``code:cs``:"
msgstr "检查编码标准，只需使用Robo.li任务``code:cs``："

#: ../../source/empty/index.rst:88
msgid ""
"The above command will ignore ``vendor`` and run on the current directory."
msgstr "上面的命令将忽略``vendor``并在当前目录上运行。"

#: ../../source/empty/index.rst:90
msgid ""
"If you want to adapt ignore list or checked directories, you can just "
"override ``$csignore`` and/or ``$csfiles`` in the ``RoboFile.php`` of the "
"plugin:"
msgstr ""
"如果你想修改忽略列表或检查目录，你可以在插件的``RoboFile.php``中覆盖``$csignore``和/或``$csfiles``："

#: ../../source/empty/index.rst:106
msgid "Automated checks"
msgstr "自动检查"

#: ../../source/empty/index.rst:108
msgid ""
"For convenience; a ``.travis.yml`` file is also provided, that is setup to:"
msgstr "为了方便；还提供了``.travis.yml``文件，设置为："

#: ../../source/empty/index.rst:110
msgid "check coding standards,"
msgstr "检查编码标准，"

#: ../../source/empty/index.rst:111
msgid "run on a bunch on different configuration"
msgstr "在不同的配置上运行堆"

#: ../../source/empty/index.rst:113
msgid ""
"You still have to enable travis-ci builds from the website in order to "
"activate automated tests."
msgstr "您仍然必须从网站启用travis-ci构建才能激活自动化测试。"

#: ../../source/empty/index.rst:115
msgid ""
"Of course, the ``.travis.yml`` file can be pimped; you can run unit tests, "
"create/update a database, activate notifications, and so on. Refer to the "
"`Travis-CI documentation <https://docs.travis-ci.com/>`_ to know more."
msgstr ""
"当然，``.travis.yml``文件可能原型；您可以运行单元测试，创建/更新数据库，激活通知等。请参阅`Travis-"
"CI文档<https://docs.travis-ci.com/>`_了解更多信息。"

#: ../../source/empty/index.rst:118
msgid "Minifying CSS ans JS"
msgstr "缩小CSS和JS"

#: ../../source/empty/index.rst:120
msgid ""
"A convenient script, using `Robo.li <http://robo.li>`_ is provided. The "
"``RoboFile.php`` file is an empty class that extends "
"``Glpi\\Tools\\RoboFile`` (provided by ``glpi-project/tools`` dependency) in"
" which you can set your own stuff."
msgstr ""
"使用`Robo.li "
"<http://robo.li>`_提供了一个方便的脚本。``RoboFile.php``文件是一个空类，它扩展了``Glpi\\Tools\\RoboFile``（由"
"``glpi-project/tools``依赖提供），你可以在其中设置自己的东西。"

#: ../../source/empty/index.rst:122
msgid ""
"That way, you can quite easily update the common file and get your own tasks"
" remaining the same."
msgstr "这样，您可以非常轻松地更新公共文件并使您自己的任务保持不变。"

#: ../../source/empty/index.rst:124
msgid ""
"To get the required libs installed, you'll have to `get composer installed "
"<http://getcomposer.org>`_ and then run:"
msgstr "要安装所需的库，你必须“安装镜像<http://getcomposer.org>`_然后运行："

#: ../../source/empty/index.rst:130
msgid "There are three available targets:"
msgstr "有三个目标："

#: ../../source/empty/index.rst:132
msgid "``minify`` that will minify all CSS and JS files (see below),"
msgstr "``minify``将缩小所有CSS和JS文件（见下文），"

#: ../../source/empty/index.rst:133
msgid ""
"``minify:css`` that will minify all css  stylesheets files in the ``css`` "
"directory of your plugin, creating a ``.min.css`` version along with the "
"original file,"
msgstr "``minify：css``将缩小插件的``css``目录中的所有css样式表文件，创建一个``.min.css``版本以及原始文件，"

#: ../../source/empty/index.rst:134
msgid ""
"``minify:js`` that will minify all javascript files in the ``js`` directory "
"of your plugin, creating a ``.min.js`` version along with the original file."
msgstr "``minify:js``将缩小插件的``js``目录中的所有javascript文件，创建一个``.min.js``版本以及原始文件。"

#: ../../source/empty/index.rst:136
msgid "Just choose a target, and run something like:"
msgstr "只需选择目标，然后执行以下操作："

#: ../../source/empty/index.rst:144
msgid ""
"Remember compiled files should not be commited on your repository sources. "
"It is a release process to minify files."
msgstr "请记住，不应在存储库源上提交已编译的文件。这是一个缩小文件的发布过程。"

#: ../../source/empty/index.rst:146
msgid ""
"Also remember to adapt your scripts so they load your minified versions if "
"available, and the original one otherwise :)"
msgstr "还记得调整你的脚本，以便加载如果可用的缩小版本，原来的版本:）"

#: ../../source/empty/index.rst:148
msgid ""
"As of GLPI 9.2; you do not have to care about loading minified files when "
"using ``add_css`` and ``add_javascript`` hooks! You just need to call not "
"minified script; and GLPI will use the minified version if it exists and if "
"not in `DEBUG` mode."
msgstr ""
"截至GLPI "
"9.2；使用``add_css``和``add_javascript``挂钩时，你不必关心加载缩小的文件！你只需要调用不缩小的脚本；如果存在，则GLPI将使用缩小版本，如果不存在，则使用“DEBUG”模式。"

#: ../../source/empty/index.rst:151
msgid "Translations"
msgstr "翻译"

#: ../../source/empty/index.rst:153
msgid ""
"GLPI and its plugins use gettext for internationnalization. Several steps "
"are required before that can work:"
msgstr "GLPI及其插件使用gettext进行国际化。在此之前需要执行几个步骤："

#: ../../source/empty/index.rst:155
msgid ""
"1 translatable strings must be extracted from source files, a ``POT`` file "
"will be created or updated accordingly, 2 ``PO`` files must be created or "
"updated from the ``POT`` file, 3 ``PO`` files must be translated, 4 ``MO`` "
"files must be compiled from the latest ``PO``."
msgstr ""
"1 必须从源文件中提取1个可翻译的字符串，相应地创建或更新``POT``文件，2 "
"``PO``文件必须从``POT``文件创建或更新，3``PO``文件必须翻译，4``MO``文件必须从最新的``PO``编译。"

#: ../../source/empty/index.rst:160
msgid ""
"In the ``vendor/bin`` directory, you'll find a ``extract_template.sh`` "
"script. This is designed to extract translatable strings from your source "
"code (see first point above)."
msgstr ""
"在``vendor/bin``目录中，你会找到一个``extract_template.sh``脚本。这旨在从源代码中提取可翻译的字符串（请参阅上面的第一点）。"

#: ../../source/empty/index.rst:162
msgid ""
"Once it has been ran, a ``locale/mygreatplugin.pot`` file will be "
"created/updated."
msgstr "一旦运行，将创建/更新``locale/mygreatplugin.pot``文件。"

#: ../../source/empty/index.rst:164
msgid ""
"For the second and third step, you'll have to make a choice. You can use "
"gettext tools to update your ``PO`` files and translate them using a "
"dedicated tool, like `poedit <https://poedit.net/>`_; or you can use an "
"online translation system like `Transifex <http://transifex.com/>`_ or "
"`Zanata <http://zanata.org/>`_. GLPI core and many of existing plugins are "
"translated using Transifex right now."
msgstr ""
"对于第二步和第三步，您必须做出选择。您可以使用gettext工具更新``PO``文件并使用专用工具进行翻译，例如`poedit "
"<https://poedit.net/>`_;或者你可以使用在线翻译系统，如`Transifex "
"<http://transifex.com/>`_或`Zanata "
"<http://zanata.org/>`_。GLPI核心和许多现有插件现在都使用Transifex进行翻译。"

#: ../../source/empty/index.rst:166
msgid ""
"Once you get your updated ``PO`` files, you'll have to compile them to "
"``MO`` files. You can run it manually, the release script will compile them "
"again anywways; see the :ref:`compiling MO files section <compile_mo>`."
msgstr ""
"一旦获得更新的``PO``文件，就必须将它们编译为``MO``文件。你可以手动运行它，发布脚本会再次编译它们；请参阅:ref:`编译MO文件部分<compile_mo>`。"

#: ../../source/empty/index.rst:171
msgid "Release script"
msgstr "发布脚本"

#: ../../source/empty/index.rst:173
msgid ""
"A release script is provided in ``vendor/bin/plugin-release``. This is a "
"\"simple\" `Python <http://python.org>`_ script; you should just have Python"
" installed on your system (this is installed by default on most linux "
"distributions)."
msgstr ""
"在``vendor/bin/plugin-release``中提供了一个发布脚本。这是一个“简单的”`Python "
"<http://python.org>`_ script；你应该在系统上安装Python（默认安装在大多数Linux发行版上）。"

#: ../../source/empty/index.rst:177
msgid ""
"Note that for the moment, the release script is only compatible if you use "
"semantic versionning!"
msgstr "目前请注意，只有在使用语义版本控制时，发布脚本才是兼容的！"

#: ../../source/empty/index.rst:179
msgid ""
"Using just the defaults, the script will try to retrieve the latest tag in "
"your git repository, add third party dependencies and create a `Release` on "
"the github project:"
msgstr "仅使用默认值，脚本将尝试检索git存储库中的最新标记，添加第三方依赖项并在github项目上创建“Release”："

#: ../../source/empty/index.rst:192
msgid "Requirements"
msgstr "要求"

#: ../../source/empty/index.rst:194
msgid ""
"You will need a python interpreter installed as well as the following "
"modules:"
msgstr "您将需要安装python解释器以及以下模块："

#: ../../source/empty/index.rst:196
msgid "`termcolor <https://pypi.python.org/pypi/termcolor>`_,"
msgstr "`termcolor <https://pypi.python.org/pypi/termcolor>`_,"

#: ../../source/empty/index.rst:197
msgid "`gitdb <https://github.com/gitpython-developers/gitdb>`_,"
msgstr "`gitdb <https://github.com/gitpython-developers/gitdb>`_,"

#: ../../source/empty/index.rst:198
msgid ""
"`github <https://github.com/PyGithub/PyGithub>`_ (to check for existing "
"versions in also in drafts, and to create github releases), unless you use "
"the ``--nogithub`` option"
msgstr ""
"`github "
"<https://github.com/PyGithub/PyGithub>`_（在草稿中检查现有版本，并创建github版本），除非你使用``--nogithub``选项"

#: ../../source/empty/index.rst:200
msgid ""
"If you want to get help on the script, try to run ``./vendor/bin/plugin-"
"release -h``."
msgstr "如果你想获得有关脚本的帮助，请尝试运行``./vendor/bin/plugin-release -h``。"

#: ../../source/empty/index.rst:203
msgid "Process"
msgstr "进程"

#: ../../source/empty/index.rst:205
msgid "The release process will achieve the following tasks for you:"
msgstr "发布过程将为您完成以下任务："

#: ../../source/empty/index.rst:207
msgid "check if the version constant is the same as the tag you've requested;"
msgstr "检查版本常量是否与您请求的标记相同；"

#: ../../source/empty/index.rst:208
msgid ""
"check if the version in the website XML file is the same as the tag you've "
"requested;"
msgstr "检查网站XML文件中的版本是否与您请求的标记相同；"

#: ../../source/empty/index.rst:209
msgid ""
"check if a release already exists, locally, and remotely (assuming your "
"project is hosted in the *pluginsGLPI* organization and the release is "
"public);"
msgstr "检查版本是否已存在，本地和远程（假设您的项目托管在* pluginsGLPI *组织中，并且该版本是公开的）;"

#: ../../source/empty/index.rst:210
msgid ""
"make a `git archive` of the paths that are not excluded (``.git``, "
"``tools``, ``tests``, ...);"
msgstr "制作一个未被排除的路径的`git archive`（``.git``，``tools``，``tests``，...）;"

#: ../../source/empty/index.rst:211
msgid "if any, install composer dependencies;"
msgstr "如果有的话，请安装composer依赖项;"

#: ../../source/empty/index.rst:212
msgid "if any, compile you ``MO`` files;"
msgstr "如果有的话，编译你的``MO``文件;"

#: ../../source/empty/index.rst:213
msgid ""
"if any, compile you CSS stylesheets and your Javascript files (using "
"`Robo.li <http://robo.li>`_);"
msgstr "如果有的话，编译你的CSS样式表和Javascript文件（使用`Robo.li <http://robo.li>`_）;"

#: ../../source/empty/index.rst:214
msgid ""
"create a release archive with all that; that will be available in the "
"``dist`` directory;"
msgstr "创建一个包含所有这些的发布存档；这将在``dist``目录中提供；"

#: ../../source/empty/index.rst:215
msgid "use GPG to sign the archive."
msgstr "使用GPG对存档进行签名。"

#: ../../source/empty/index.rst:219
msgid ""
"The standard release process will not work on your files directly, it will "
"make a copy in the ``dist/src`` directory before. The only exception is the "
":ref:`MO compiling option <compile_mo>`."
msgstr ""
"标准的发布过程不能直接对你的文件起作用，它会在``dist/src``目录中复制。唯一的例外是:ref:`MO编译选项<compile_mo>`。"

#: ../../source/empty/index.rst:221
msgid ""
"In order to check if all is OK before doing real release; create your tag "
"and run ``./vendor/bin/plugin-release -C`` **before pushing your tag**. That"
" way, you'll be able to fix potential issues and re-create your tag locally "
"(remember published tags should **never** be removed)."
msgstr ""
"在进行实际发布之前检查是否一切正常；创建你的标签并在推动你的标签**之前运行`./vendor/bin/plugin-release -C`` "
"**。这样，您就可以解决潜在问题并在本地重新创建标记（请记住，发布的标记应该永远不会被删除）。"

#: ../../source/empty/index.rst:226
msgid "Compiling MO files"
msgstr "编译MO文件"

#: ../../source/empty/index.rst:228
msgid ""
"The release process will automatically compile every ``PO`` file it will "
"found in your ``locales`` directory. But you probably want the sources to "
"contain the latests ``MO`` files, for testing purposes. The release script "
"provide the ``--compile-mo`` (or ``-m``) to achieve that:"
msgstr ""
"发布过程将自动编译它将在``locales``目录中找到的每个``PO``文件。但是你可能希望源包含最后的``MO``文件，用于测试目的。发布脚本提供"
"``--compile-mo``（或``-m``）来实现："

#: ../../source/empty/index.rst:236
msgid ""
"The above command will work on your plugins files directly; not on a copy as"
" does other commands."
msgstr "以上命令将直接对您的插件文件起作用；不像其他命令那样在副本上。"

#: ../../source/empty/index.rst:239
msgid "Pre-releases"
msgstr "预览版"

#: ../../source/empty/index.rst:241
msgid ""
"Per default, the release script will work only on existing tags. Any pre-"
"release should have its own tag; but you may want to create a release "
"archive without any tags in some circumstances."
msgstr "默认情况下，发布脚本仅适用于现有标记。任何预发布都应该有自己的标签；但在某些情况下，您可能希望创建没有任何标记的版本存档。"

#: ../../source/empty/index.rst:243
msgid ""
"In order to tell the release script what it should archive, you'll have to "
"specify several parameters:"
msgstr "为了告诉发布脚本它应归档的内容，您必须指定几个参数："

#: ../../source/empty/index.rst:245
msgid "``--commit`` (or ``-c``) giving the commit hash,"
msgstr "``--commit``（或``-c``）给出提交哈希，"

#: ../../source/empty/index.rst:246
msgid ""
"``--release`` (or ``-r``) giving the release version (usually, it will be "
"the next release version),"
msgstr "``--release``（或``-r``）给出发布版本（通常，它将是下一个发行版本），"

#: ../../source/empty/index.rst:247
msgid ""
"``--extra`` (or ``-e``) to specify an extra string (such as *alpha*, *beta*,"
" *rc1*, etc...)"
msgstr "``--extra``（或``-e``）指定一个额外的字符串（例如* alpha *，* beta *，* rc1 *等...）"

#: ../../source/empty/index.rst:249
msgid "As an example with the *order* plugin:"
msgstr "作为* order *插件的示例："

#: ../../source/empty/index.rst:258
msgid "Signing releases"
msgstr "签署版本"

#: ../../source/empty/index.rst:260
msgid ""
"Signing releases with a GPG key would permit users to check download "
"integrity before installing. You'll need a GPG key publically available to "
"users; the sign option is activated per default, you can deactivate using "
"the ``--nosign`` (or ``-S``) option."
msgstr ""
"使用GPG密钥签名版本将允许用户在安装之前检查下载完整性。您需要向用户公开提供GPG密钥；默认情况下会激活sign选项，您可以使用``--nosign``（或``-S``）选项取消激活。"

#: ../../source/empty/index.rst:262
msgid ""
"A file containing the signature with the same name as the archive with a "
"``.asc`` extension will be created in the ``dist`` directory."
msgstr "将在``dist``目录中创建一个包含与具有“.asc``扩展名的存档同名的签名的文件。"

#: ../../source/empty/index.rst:265
msgid "GitHub release"
msgstr "GitHub发布"

#: ../../source/empty/index.rst:267
msgid ""
"The release script will create a release on your GitHub repository, as a "
"draft, unless you use ``--nogithub`` (or ``-g``) option."
msgstr "发布脚本将在您的GitHub存储库上创建一个发布版本，除非您使用``--nogithub``（或``-g``）选项。"

#: ../../source/empty/index.rst:271
msgid ""
"Unfortunately, I was not able to get the newly created archive uploaded to "
"this new release... Maybe that could be fixed in the future."
msgstr "不幸的是，我无法将新创建的档案上传到这个新版本......也许这可以在将来修复。"

#: ../../source/empty/index.rst:273
msgid ""
"In order to use this feature, you will need the `github "
"<https://github.com/PyGithub/PyGithub>`_ installed; and you will need an "
"access token. Access token is valid per user, and gives accesss to all his "
"repositories."
msgstr ""
"要使用此功能，您需要安装`github "
"<https://github.com/PyGithub/PyGithub>`_；你需要一个访问口令。访问口令对每个用户有效，并提供对其所有存储库的访问权限。"

#: ../../source/empty/index.rst:275
msgid ""
"You'll have to go to your `github account settings page, in the personnal "
"access token tab <https://github.com/settings/tokens>`_. Click on *generate "
"new token*, give the description you want, and make sure you'll check the "
"*public_repo* box only (no need to check anything else, you can create "
"several access token if you need)."
msgstr ""
"您必须访问个人访问令牌选项卡<https://github.com/settings/tokens>`_中的`github帐户设置页面。单击*生成新令牌*，给出您想要的描述，并确保您只检查*"
" public_repo *框（无需检查任何其他内容，如果需要，您可以创建多个访问令牌）。"

#: ../../source/empty/index.rst:277
msgid ""
"The token will be displayed only once; store it in the ``.gh_token`` file in"
" your plugin directory; and that's all!"
msgstr "令牌只会显示一次；将它存储在插件目录中的``.gh_token``文件中；结束！"

#: ../../<rst_epilog>:2
msgid "|ccbyncnd|"
msgstr "|CC-BY-NC-ND|"
